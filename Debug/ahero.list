
ahero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000010  08004420  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004420  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091c8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001603  00000000  00000000  00029208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  0002a810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000660  00000000  00000000  0002af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e8d  00000000  00000000  0002b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000692f  00000000  00000000  00041415  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085d54  00000000  00000000  00047d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cda98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d10  00000000  00000000  000cdb14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ecc 	.word	0x08003ecc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003ecc 	.word	0x08003ecc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <ILI9341_SendCommand+0x54>)
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <ILI9341_SendCommand+0x58>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f001 fed9 	bl	8002b24 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <ILI9341_SendCommand+0x5c>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <ILI9341_SendCommand+0x60>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f001 fed1 	bl	8002b24 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000d82:	f107 010f 	add.w	r1, r7, #15
 8000d86:	2305      	movs	r3, #5
 8000d88:	2201      	movs	r2, #1
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <ILI9341_SendCommand+0x64>)
 8000d8c:	f002 fb76 	bl	800347c <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <ILI9341_SendCommand+0x5c>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <ILI9341_SendCommand+0x60>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f001 fec2 	bl	8002b24 <HAL_GPIO_WritePin>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000090 	.word	0x20000090
 8000dac:	20000094 	.word	0x20000094
 8000db0:	20000088 	.word	0x20000088
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	20000030 	.word	0x20000030

08000dbc <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <ILI9341_SendData+0x54>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <ILI9341_SendData+0x58>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f001 fea5 	bl	8002b24 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <ILI9341_SendData+0x5c>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <ILI9341_SendData+0x60>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	4619      	mov	r1, r3
 8000de6:	f001 fe9d 	bl	8002b24 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000dea:	f107 010f 	add.w	r1, r7, #15
 8000dee:	2305      	movs	r3, #5
 8000df0:	2201      	movs	r2, #1
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <ILI9341_SendData+0x64>)
 8000df4:	f002 fb42 	bl	800347c <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <ILI9341_SendData+0x5c>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <ILI9341_SendData+0x60>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4619      	mov	r1, r3
 8000e04:	f001 fe8e 	bl	8002b24 <HAL_GPIO_WritePin>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000090 	.word	0x20000090
 8000e14:	20000094 	.word	0x20000094
 8000e18:	20000088 	.word	0x20000088
 8000e1c:	2000008c 	.word	0x2000008c
 8000e20:	20000030 	.word	0x20000030

08000e24 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	4623      	mov	r3, r4
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	4603      	mov	r3, r0
 8000e38:	80bb      	strh	r3, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 8000e42:	202a      	movs	r0, #42	; 0x2a
 8000e44:	f7ff ff86 	bl	8000d54 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ffb3 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ffae 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffa7 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffa2 	bl	8000dbc <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8000e78:	202b      	movs	r0, #43	; 0x2b
 8000e7a:	f7ff ff6b 	bl	8000d54 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff98 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff93 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8000e96:	883b      	ldrh	r3, [r7, #0]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff8c 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8000ea4:	883b      	ldrh	r3, [r7, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff87 	bl	8000dbc <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000eae:	202c      	movs	r0, #44	; 0x2c
 8000eb0:	f7ff ff50 	bl	8000d54 <ILI9341_SendCommand>
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000ecc:	2258      	movs	r2, #88	; 0x58
 8000ece:	68f9      	ldr	r1, [r7, #12]
 8000ed0:	4853      	ldr	r0, [pc, #332]	; (8001020 <ILI9341_Init+0x164>)
 8000ed2:	f002 ffe7 	bl	8003ea4 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8000ed6:	4a53      	ldr	r2, [pc, #332]	; (8001024 <ILI9341_Init+0x168>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <ILI9341_Init+0x16c>)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 8000ee2:	4a52      	ldr	r2, [pc, #328]	; (800102c <ILI9341_Init+0x170>)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000ee8:	4a51      	ldr	r2, [pc, #324]	; (8001030 <ILI9341_Init+0x174>)
 8000eea:	8b3b      	ldrh	r3, [r7, #24]
 8000eec:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000eee:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <ILI9341_Init+0x168>)
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <ILI9341_Init+0x16c>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f001 fe13 	bl	8002b24 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000efe:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <ILI9341_Init+0x178>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <ILI9341_Init+0x17c>)
 8000f06:	8c3b      	ldrh	r3, [r7, #32]
 8000f08:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000f0a:	8c3b      	ldrh	r3, [r7, #32]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4619      	mov	r1, r3
 8000f10:	69f8      	ldr	r0, [r7, #28]
 8000f12:	f001 fe07 	bl	8002b24 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff ff1c 	bl	8000d54 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f001 fb77 	bl	8002610 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 8000f22:	2028      	movs	r0, #40	; 0x28
 8000f24:	f7ff ff16 	bl	8000d54 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 8000f28:	20c0      	movs	r0, #192	; 0xc0
 8000f2a:	f7ff ff13 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 8000f2e:	2026      	movs	r0, #38	; 0x26
 8000f30:	f7ff ff44 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 8000f34:	20c1      	movs	r0, #193	; 0xc1
 8000f36:	f7ff ff0d 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8000f3a:	2011      	movs	r0, #17
 8000f3c:	f7ff ff3e 	bl	8000dbc <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 8000f40:	20c5      	movs	r0, #197	; 0xc5
 8000f42:	f7ff ff07 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8000f46:	2035      	movs	r0, #53	; 0x35
 8000f48:	f7ff ff38 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8000f4c:	203e      	movs	r0, #62	; 0x3e
 8000f4e:	f7ff ff35 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 8000f52:	20c7      	movs	r0, #199	; 0xc7
 8000f54:	f7ff fefe 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8000f58:	20be      	movs	r0, #190	; 0xbe
 8000f5a:	f7ff ff2f 	bl	8000dbc <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 8000f5e:	2036      	movs	r0, #54	; 0x36
 8000f60:	f7ff fef8 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8000f64:	2048      	movs	r0, #72	; 0x48
 8000f66:	f7ff ff29 	bl	8000dbc <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8000f6a:	203a      	movs	r0, #58	; 0x3a
 8000f6c:	f7ff fef2 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 8000f70:	2055      	movs	r0, #85	; 0x55
 8000f72:	f7ff ff23 	bl	8000dbc <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8000f76:	20b1      	movs	r0, #177	; 0xb1
 8000f78:	f7ff feec 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ff1d 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 8000f82:	201f      	movs	r0, #31
 8000f84:	f7ff ff1a 	bl	8000dbc <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000f88:	202a      	movs	r0, #42	; 0x2a
 8000f8a:	f7ff fee3 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ff14 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff ff11 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff ff0e 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000fa0:	20ef      	movs	r0, #239	; 0xef
 8000fa2:	f7ff ff0b 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8000fa6:	202b      	movs	r0, #43	; 0x2b
 8000fa8:	f7ff fed4 	bl	8000d54 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ff05 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff ff02 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff feff 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000fbe:	203f      	movs	r0, #63	; 0x3f
 8000fc0:	f7ff fefc 	bl	8000dbc <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8000fc4:	2034      	movs	r0, #52	; 0x34
 8000fc6:	f7ff fec5 	bl	8000d54 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000fca:	20b7      	movs	r0, #183	; 0xb7
 8000fcc:	f7ff fec2 	bl	8000d54 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000fd0:	2007      	movs	r0, #7
 8000fd2:	f7ff fef3 	bl	8000dbc <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8000fd6:	20b6      	movs	r0, #182	; 0xb6
 8000fd8:	f7ff febc 	bl	8000d54 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f7ff feed 	bl	8000dbc <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 8000fe2:	2082      	movs	r0, #130	; 0x82
 8000fe4:	f7ff feea 	bl	8000dbc <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000fe8:	2027      	movs	r0, #39	; 0x27
 8000fea:	f7ff fee7 	bl	8000dbc <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fee4 	bl	8000dbc <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 8000ff4:	2011      	movs	r0, #17
 8000ff6:	f7ff fead 	bl	8000d54 <ILI9341_SendCommand>
   HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f001 fb08 	bl	8002610 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8001000:	2029      	movs	r0, #41	; 0x29
 8001002:	f7ff fea7 	bl	8000d54 <ILI9341_SendCommand>
   HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f001 fb02 	bl	8002610 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 800100c:	202c      	movs	r0, #44	; 0x2c
 800100e:	f7ff fea1 	bl	8000d54 <ILI9341_SendCommand>
   HAL_Delay(5);
 8001012:	2005      	movs	r0, #5
 8001014:	f001 fafc 	bl	8002610 <HAL_Delay>
 }
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000030 	.word	0x20000030
 8001024:	20000088 	.word	0x20000088
 8001028:	2000008c 	.word	0x2000008c
 800102c:	20000090 	.word	0x20000090
 8001030:	20000094 	.word	0x20000094
 8001034:	20000098 	.word	0x20000098
 8001038:	2000009c 	.word	0x2000009c

0800103c <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	460b      	mov	r3, r1
 8001048:	80bb      	strh	r3, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	88b9      	ldrh	r1, [r7, #4]
 8001054:	88f8      	ldrh	r0, [r7, #6]
 8001056:	f7ff fee5 	bl	8000e24 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	b29b      	uxth	r3, r3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff feaa 	bl	8000dbc <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fea5 	bl	8000dbc <ILI9341_SendData>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001086:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800108a:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 800108c:	23ff      	movs	r3, #255	; 0xff
 800108e:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <ILI9341_Fill+0x80>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d003      	beq.n	80010a0 <ILI9341_Fill+0x24>
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <ILI9341_Fill+0x80>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d107      	bne.n	80010b0 <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 80010a0:	f240 133f 	movw	r3, #319	; 0x13f
 80010a4:	22ef      	movs	r2, #239	; 0xef
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff febb 	bl	8000e24 <ILI9341_SetCursorPosition>
 80010ae:	e00e      	b.n	80010ce <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <ILI9341_Fill+0x80>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d003      	beq.n	80010c0 <ILI9341_Fill+0x44>
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <ILI9341_Fill+0x80>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d116      	bne.n	80010ee <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 80010c0:	23ef      	movs	r3, #239	; 0xef
 80010c2:	f240 123f 	movw	r2, #319	; 0x13f
 80010c6:	2100      	movs	r1, #0
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff feab 	bl	8000e24 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 80010ce:	e00e      	b.n	80010ee <ILI9341_Fill+0x72>
			n--;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe6c 	bl	8000dbc <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe67 	bl	8000dbc <ILI9341_SendData>
	while (n) {
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1ed      	bne.n	80010d0 <ILI9341_Fill+0x54>
	}
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000

08001100 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	3301      	adds	r3, #1
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	1a8a      	subs	r2, r1, r2
 800111c:	3201      	adds	r2, #1
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800112a:	d902      	bls.n	8001132 <ILI9341_Fill_Rect+0x32>
 800112c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001130:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	b298      	uxth	r0, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	b299      	uxth	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	b29a      	uxth	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	f7ff fe6f 	bl	8000e24 <ILI9341_SetCursorPosition>
	while (n) {
 8001146:	e00e      	b.n	8001166 <ILI9341_Fill_Rect+0x66>
			n--;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3b01      	subs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 800114e:	8c3b      	ldrh	r3, [r7, #32]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b29b      	uxth	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fe30 	bl	8000dbc <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800115c:	8c3b      	ldrh	r3, [r7, #32]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe2b 	bl	8000dbc <ILI9341_SendData>
	while (n) {
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ed      	bne.n	8001148 <ILI9341_Fill_Rect+0x48>
	}
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	4604      	mov	r4, r0
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4623      	mov	r3, r4
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	4603      	mov	r3, r0
 8001188:	80bb      	strh	r3, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	807b      	strh	r3, [r7, #2]
 800118e:	4613      	mov	r3, r2
 8001190:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	f1c3 0301 	rsb	r3, r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	461a      	mov	r2, r3
 80011a4:	03d2      	lsls	r2, r2, #15
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80011b2:	887b      	ldrh	r3, [r7, #2]
 80011b4:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80011b6:	e083      	b.n	80012c0 <fillCircleHelper+0x14c>
    if (f >= 0) {
 80011b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0e      	blt.n	80011de <fillCircleHelper+0x6a>
      y--;
 80011c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80011cc:	8a7b      	ldrh	r3, [r7, #18]
 80011ce:	3302      	adds	r3, #2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80011d4:	8afa      	ldrh	r2, [r7, #22]
 80011d6:	8a7b      	ldrh	r3, [r7, #18]
 80011d8:	4413      	add	r3, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80011de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80011ea:	8abb      	ldrh	r3, [r7, #20]
 80011ec:	3302      	adds	r3, #2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80011f2:	8afa      	ldrh	r2, [r7, #22]
 80011f4:	8abb      	ldrh	r3, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d02b      	beq.n	800125e <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	8a3b      	ldrh	r3, [r7, #16]
 800120a:	4413      	add	r3, r2
 800120c:	b29b      	uxth	r3, r3
 800120e:	b218      	sxth	r0, r3
 8001210:	88ba      	ldrh	r2, [r7, #4]
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	b29b      	uxth	r3, r3
 8001218:	b219      	sxth	r1, r3
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001222:	4413      	add	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	3301      	adds	r3, #1
 8001228:	b29b      	uxth	r3, r3
 800122a:	b21a      	sxth	r2, r3
 800122c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800122e:	f000 f91f 	bl	8001470 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	b218      	sxth	r0, r3
 800123c:	88ba      	ldrh	r2, [r7, #4]
 800123e:	8a3b      	ldrh	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b29b      	uxth	r3, r3
 8001244:	b219      	sxth	r1, r3
 8001246:	8a3b      	ldrh	r3, [r7, #16]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b29b      	uxth	r3, r3
 8001256:	b21a      	sxth	r2, r3
 8001258:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800125a:	f000 f909 	bl	8001470 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 800125e:	787b      	ldrb	r3, [r7, #1]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d02b      	beq.n	80012c0 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	8a3b      	ldrh	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	b218      	sxth	r0, r3
 8001272:	88ba      	ldrh	r2, [r7, #4]
 8001274:	89fb      	ldrh	r3, [r7, #14]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29b      	uxth	r3, r3
 800127a:	b219      	sxth	r1, r3
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	b29a      	uxth	r2, r3
 8001282:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	b29b      	uxth	r3, r3
 800128c:	b21a      	sxth	r2, r3
 800128e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001290:	f000 f8ee 	bl	8001470 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	b218      	sxth	r0, r3
 800129e:	88ba      	ldrh	r2, [r7, #4]
 80012a0:	8a3b      	ldrh	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	b219      	sxth	r1, r3
 80012a8:	8a3b      	ldrh	r3, [r7, #16]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012bc:	f000 f8d8 	bl	8001470 <ILI9341_drawFastVLine>
  while (x<y) {
 80012c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f6ff af75 	blt.w	80011b8 <fillCircleHelper+0x44>
    }
  }
}
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}

080012d6 <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b085      	sub	sp, #20
 80012da:	af02      	add	r7, sp, #8
 80012dc:	4604      	mov	r4, r0
 80012de:	4608      	mov	r0, r1
 80012e0:	4611      	mov	r1, r2
 80012e2:	461a      	mov	r2, r3
 80012e4:	4623      	mov	r3, r4
 80012e6:	80fb      	strh	r3, [r7, #6]
 80012e8:	4603      	mov	r3, r0
 80012ea:	80bb      	strh	r3, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b219      	sxth	r1, r3
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	b21a      	sxth	r2, r3
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001310:	f000 f8ae 	bl	8001470 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001314:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001318:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800131c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2300      	movs	r3, #0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2303      	movs	r3, #3
 800132a:	f7ff ff23 	bl	8001174 <fillCircleHelper>
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}

08001336 <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001336:	b590      	push	{r4, r7, lr}
 8001338:	b089      	sub	sp, #36	; 0x24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4604      	mov	r4, r0
 800133e:	4608      	mov	r0, r1
 8001340:	4611      	mov	r1, r2
 8001342:	461a      	mov	r2, r3
 8001344:	4623      	mov	r3, r4
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	4603      	mov	r3, r0
 800134a:	80bb      	strh	r3, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001354:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001358:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001362:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001366:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	1acb      	subs	r3, r1, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	bfb8      	it	lt
 8001374:	425b      	neglt	r3, r3
 8001376:	429a      	cmp	r2, r3
 8001378:	bfcc      	ite	gt
 800137a:	2301      	movgt	r3, #1
 800137c:	2300      	movle	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001382:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	833b      	strh	r3, [r7, #24]
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	8b3b      	ldrh	r3, [r7, #24]
 8001394:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	82fb      	strh	r3, [r7, #22]
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	807b      	strh	r3, [r7, #2]
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 80013a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dd0b      	ble.n	80013c6 <ILI9341_drawLine+0x90>
    swap(x0, x1);
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	82bb      	strh	r3, [r7, #20]
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	8abb      	ldrh	r3, [r7, #20]
 80013b8:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 80013ba:	88bb      	ldrh	r3, [r7, #4]
 80013bc:	827b      	strh	r3, [r7, #18]
 80013be:	883b      	ldrh	r3, [r7, #0]
 80013c0:	80bb      	strh	r3, [r7, #4]
 80013c2:	8a7b      	ldrh	r3, [r7, #18]
 80013c4:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 80013d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80013d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bfb8      	it	lt
 80013de:	425b      	neglt	r3, r3
 80013e0:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80013e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013e6:	0fda      	lsrs	r2, r3, #31
 80013e8:	4413      	add	r3, r2
 80013ea:	105b      	asrs	r3, r3, #1
 80013ec:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80013ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	da02      	bge.n	8001400 <ILI9341_drawLine+0xca>
    ystep = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	83bb      	strh	r3, [r7, #28]
 80013fe:	e02d      	b.n	800145c <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 8001400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001404:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 8001406:	e029      	b.n	800145c <ILI9341_drawLine+0x126>
    if (steep) {
 8001408:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	88f9      	ldrh	r1, [r7, #6]
 8001414:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe10 	bl	800103c <ILI9341_DrawPixel>
 800141c:	e005      	b.n	800142a <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	88b9      	ldrh	r1, [r7, #4]
 8001422:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe09 	bl	800103c <ILI9341_DrawPixel>
    }
    err -= dy;
 800142a:	8bfa      	ldrh	r2, [r7, #30]
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8001434:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da09      	bge.n	8001450 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 800143c:	88ba      	ldrh	r2, [r7, #4]
 800143e:	8bbb      	ldrh	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001446:	8bfa      	ldrh	r2, [r7, #30]
 8001448:	8a3b      	ldrh	r3, [r7, #16]
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	b29b      	uxth	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001460:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001464:	429a      	cmp	r2, r3
 8001466:	ddcf      	ble.n	8001408 <ILI9341_drawLine+0xd2>
    }
  }
}	
 8001468:	bf00      	nop
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af02      	add	r7, sp, #8
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	80fb      	strh	r3, [r7, #6]
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]
 800148a:	4613      	mov	r3, r2
 800148c:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 800148e:	88ba      	ldrh	r2, [r7, #4]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	4413      	add	r3, r2
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	b21c      	sxth	r4, r3
 800149c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014a8:	883b      	ldrh	r3, [r7, #0]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4623      	mov	r3, r4
 80014ae:	f7ff ff42 	bl	8001336 <ILI9341_drawLine>
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
	...

080014bc <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	4611      	mov	r1, r2
 80014c8:	461a      	mov	r2, r3
 80014ca:	4623      	mov	r3, r4
 80014cc:	80fb      	strh	r3, [r7, #6]
 80014ce:	4603      	mov	r3, r0
 80014d0:	80bb      	strh	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	4613      	mov	r3, r2
 80014d8:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 80014da:	4b9a      	ldr	r3, [pc, #616]	; (8001744 <ILI9341_drawChar+0x288>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d003      	beq.n	80014ea <ILI9341_drawChar+0x2e>
 80014e2:	4b98      	ldr	r3, [pc, #608]	; (8001744 <ILI9341_drawChar+0x288>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d121      	bne.n	800152e <ILI9341_drawChar+0x72>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 80014ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ee:	2bef      	cmp	r3, #239	; 0xef
 80014f0:	f300 8121 	bgt.w	8001736 <ILI9341_drawChar+0x27a>
 80014f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80014fc:	f280 811b 	bge.w	8001736 <ILI9341_drawChar+0x27a>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8001500:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001504:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	440b      	add	r3, r1
 8001512:	3b01      	subs	r3, #1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8001514:	2b00      	cmp	r3, #0
 8001516:	f2c0 810e 	blt.w	8001736 <ILI9341_drawChar+0x27a>
     ((y + 8 * size - 1) < 0))   // Clip top
 800151a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800151e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4413      	add	r3, r2
 8001526:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 8001528:	2b00      	cmp	r3, #0
 800152a:	da23      	bge.n	8001574 <ILI9341_drawChar+0xb8>
    return;
 800152c:	e103      	b.n	8001736 <ILI9341_drawChar+0x27a>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 800152e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001532:	2bef      	cmp	r3, #239	; 0xef
 8001534:	f300 8101 	bgt.w	800173a <ILI9341_drawChar+0x27e>
 8001538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001540:	f280 80fb 	bge.w	800173a <ILI9341_drawChar+0x27e>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8001544:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001548:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	440b      	add	r3, r1
 8001556:	3b01      	subs	r3, #1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8001558:	2b00      	cmp	r3, #0
 800155a:	f2c0 80ee 	blt.w	800173a <ILI9341_drawChar+0x27e>
     ((x + 8 * size - 1) < 0))   // Clip top
 800155e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001562:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 800156c:	2b00      	cmp	r3, #0
 800156e:	f2c0 80e4 	blt.w	800173a <ILI9341_drawChar+0x27e>
 8001572:	e000      	b.n	8001576 <ILI9341_drawChar+0xba>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8001574:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001576:	4b74      	ldr	r3, [pc, #464]	; (8001748 <ILI9341_drawChar+0x28c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f083 0301 	eor.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <ILI9341_drawChar+0xd4>
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2baf      	cmp	r3, #175	; 0xaf
 8001588:	d902      	bls.n	8001590 <ILI9341_drawChar+0xd4>
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	3301      	adds	r3, #1
 800158e:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e0c9      	b.n	800172a <ILI9341_drawChar+0x26e>
    uint8_t line;
    if (i == 5) 
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d102      	bne.n	80015a4 <ILI9341_drawChar+0xe8>
      line = 0x0;
 800159e:	2300      	movs	r3, #0
 80015a0:	73bb      	strb	r3, [r7, #14]
 80015a2:	e00b      	b.n	80015bc <ILI9341_drawChar+0x100>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a65      	ldr	r2, [pc, #404]	; (800174c <ILI9341_drawChar+0x290>)
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	737b      	strb	r3, [r7, #13]
 80015c0:	e0a8      	b.n	8001714 <ILI9341_drawChar+0x258>
      if (line & 0x1) {
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d04b      	beq.n	8001664 <ILI9341_drawChar+0x1a8>
        if (size == 1) // default size
 80015cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d110      	bne.n	80015f6 <ILI9341_drawChar+0x13a>
          ILI9341_DrawPixel(x+i, y+j, color);
 80015d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	4413      	add	r3, r2
 80015de:	b298      	uxth	r0, r3
 80015e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	883a      	ldrh	r2, [r7, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fd24 	bl	800103c <ILI9341_DrawPixel>
 80015f4:	e085      	b.n	8001702 <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80015f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	4413      	add	r3, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800160e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001612:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	461c      	mov	r4, r3
 800161e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	441a      	add	r2, r3
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	461d      	mov	r5, r3
 8001638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001642:	441a      	add	r2, r3
 8001644:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001648:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	461a      	mov	r2, r3
 8001654:	883b      	ldrh	r3, [r7, #0]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	462a      	mov	r2, r5
 800165c:	4621      	mov	r1, r4
 800165e:	f7ff fd4f 	bl	8001100 <ILI9341_Fill_Rect>
 8001662:	e04e      	b.n	8001702 <ILI9341_drawChar+0x246>
        } 
      } else if (bg != color) {
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	883b      	ldrh	r3, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d04a      	beq.n	8001702 <ILI9341_drawChar+0x246>
        if (size == 1) // default size
 800166c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001670:	2b01      	cmp	r3, #1
 8001672:	d110      	bne.n	8001696 <ILI9341_drawChar+0x1da>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001678:	b29a      	uxth	r2, r3
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4413      	add	r3, r2
 800167e:	b298      	uxth	r0, r3
 8001680:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001684:	b29a      	uxth	r2, r3
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	b29b      	uxth	r3, r3
 800168c:	8c3a      	ldrh	r2, [r7, #32]
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fcd4 	bl	800103c <ILI9341_DrawPixel>
 8001694:	e035      	b.n	8001702 <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001696:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016b2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	461c      	mov	r4, r3
 80016be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	441a      	add	r2, r3
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e2:	441a      	add	r2, r3
 80016e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016e8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	461a      	mov	r2, r3
 80016f4:	8c3b      	ldrh	r3, [r7, #32]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	462a      	mov	r2, r5
 80016fc:	4621      	mov	r1, r4
 80016fe:	f7ff fcff 	bl	8001100 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001708:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3301      	adds	r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	737b      	strb	r3, [r7, #13]
 8001714:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001718:	2b07      	cmp	r3, #7
 800171a:	f77f af52 	ble.w	80015c2 <ILI9341_drawChar+0x106>
  for (int8_t i=0; i<6; i++ ) {
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	3301      	adds	r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	2b05      	cmp	r3, #5
 8001730:	f77f af31 	ble.w	8001596 <ILI9341_drawChar+0xda>
 8001734:	e002      	b.n	800173c <ILI9341_drawChar+0x280>
    return;
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <ILI9341_drawChar+0x280>
    return;
 800173a:	bf00      	nop
    }
  }
}
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bdb0      	pop	{r4, r5, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000
 8001748:	2000002c 	.word	0x2000002c
 800174c:	08003ef0 	.word	0x08003ef0

08001750 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	817b      	strh	r3, [r7, #10]
 8001762:	460b      	mov	r3, r1
 8001764:	813b      	strh	r3, [r7, #8]
 8001766:	4613      	mov	r3, r2
 8001768:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 800176a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800176e:	b29b      	uxth	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	0052      	lsls	r2, r2, #1
 8001774:	4413      	add	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 800177c:	2300      	movs	r3, #0
 800177e:	82fb      	strh	r3, [r7, #22]
 8001780:	e01a      	b.n	80017b8 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001782:	8abb      	ldrh	r3, [r7, #20]
 8001784:	8afa      	ldrh	r2, [r7, #22]
 8001786:	fb12 f303 	smulbb	r3, r2, r3
 800178a:	b29a      	uxth	r2, r3
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	b218      	sxth	r0, r3
 8001794:	8afb      	ldrh	r3, [r7, #22]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	88fc      	ldrh	r4, [r7, #6]
 800179e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80017a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4623      	mov	r3, r4
 80017ae:	f7ff fe85 	bl	80014bc <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80017b2:	8afb      	ldrh	r3, [r7, #22]
 80017b4:	3301      	adds	r3, #1
 80017b6:	82fb      	strh	r3, [r7, #22]
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	2b27      	cmp	r3, #39	; 0x27
 80017bc:	d805      	bhi.n	80017ca <ILI9341_printText+0x7a>
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1db      	bne.n	8001782 <ILI9341_printText+0x32>
	}
}
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}
	...

080017d4 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d832      	bhi.n	800184c <ILI9341_setRotation+0x78>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <ILI9341_setRotation+0x18>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	08001811 	.word	0x08001811
 80017f4:	08001825 	.word	0x08001825
 80017f8:	08001839 	.word	0x08001839
	{
		case 1:
			rotationNum = 1;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <ILI9341_setRotation+0x94>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001802:	2036      	movs	r0, #54	; 0x36
 8001804:	f7ff faa6 	bl	8000d54 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001808:	2088      	movs	r0, #136	; 0x88
 800180a:	f7ff fad7 	bl	8000dbc <ILI9341_SendData>
			break;
 800180e:	e027      	b.n	8001860 <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <ILI9341_setRotation+0x94>)
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001816:	2036      	movs	r0, #54	; 0x36
 8001818:	f7ff fa9c 	bl	8000d54 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f7ff facd 	bl	8000dbc <ILI9341_SendData>
			break;
 8001822:	e01d      	b.n	8001860 <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <ILI9341_setRotation+0x94>)
 8001826:	2203      	movs	r2, #3
 8001828:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800182a:	2036      	movs	r0, #54	; 0x36
 800182c:	f7ff fa92 	bl	8000d54 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001830:	2048      	movs	r0, #72	; 0x48
 8001832:	f7ff fac3 	bl	8000dbc <ILI9341_SendData>
			break;
 8001836:	e013      	b.n	8001860 <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <ILI9341_setRotation+0x94>)
 800183a:	2204      	movs	r2, #4
 800183c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 800183e:	2036      	movs	r0, #54	; 0x36
 8001840:	f7ff fa88 	bl	8000d54 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001844:	20e8      	movs	r0, #232	; 0xe8
 8001846:	f7ff fab9 	bl	8000dbc <ILI9341_SendData>
			break;
 800184a:	e009      	b.n	8001860 <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <ILI9341_setRotation+0x94>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001852:	2036      	movs	r0, #54	; 0x36
 8001854:	f7ff fa7e 	bl	8000d54 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001858:	2088      	movs	r0, #136	; 0x88
 800185a:	f7ff faaf 	bl	8000dbc <ILI9341_SendData>
			break;
 800185e:	bf00      	nop
	}
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000000 	.word	0x20000000

0800186c <ILI9341_getRotation>:
//14. Get screen rotation
uint8_t ILI9341_getRotation(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	return rotationNum;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <ILI9341_getRotation+0x14>)
 8001872:	781b      	ldrb	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000000 	.word	0x20000000

08001884 <TSC2046_SendCommand>:
#define _TS_CS_DISABLE		HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);

//Functions definitions
//1. Send TSC2046 Command and wait for a response
uint16_t TSC2046_SendCommand(uint8_t cmd)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3] = {0,0,0};
 800188e:	2300      	movs	r3, #0
 8001890:	723b      	strb	r3, [r7, #8]
 8001892:	2300      	movs	r3, #0
 8001894:	727b      	strb	r3, [r7, #9]
 8001896:	2300      	movs	r3, #0
 8001898:	72bb      	strb	r3, [r7, #10]
	uint16_t return16=0;
 800189a:	2300      	movs	r3, #0
 800189c:	81fb      	strh	r3, [r7, #14]
	
	_TS_CS_ENBALE;
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <TSC2046_SendCommand+0x7c>)
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <TSC2046_SendCommand+0x80>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	f001 f93b 	bl	8002b24 <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&tsSPIhandle, spiBuf, 1, 10);
 80018b2:	f107 0108 	add.w	r1, r7, #8
 80018b6:	230a      	movs	r3, #10
 80018b8:	2201      	movs	r2, #1
 80018ba:	4813      	ldr	r0, [pc, #76]	; (8001908 <TSC2046_SendCommand+0x84>)
 80018bc:	f001 fdde 	bl	800347c <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	HAL_Delay(3);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 fea5 	bl	8002610 <HAL_Delay>
	if(HAL_SPI_Receive(&tsSPIhandle, &spiBuf[1], 2, 10) == HAL_OK) return16 = (spiBuf[1]<<4) + (spiBuf[2]>>4);
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	230a      	movs	r3, #10
 80018ce:	2202      	movs	r2, #2
 80018d0:	480d      	ldr	r0, [pc, #52]	; (8001908 <TSC2046_SendCommand+0x84>)
 80018d2:	f001 ff07 	bl	80036e4 <HAL_SPI_Receive>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10a      	bne.n	80018f2 <TSC2046_SendCommand+0x6e>
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	7abb      	ldrb	r3, [r7, #10]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	81fb      	strh	r3, [r7, #14]
 80018f0:	e001      	b.n	80018f6 <TSC2046_SendCommand+0x72>
	else return16 = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	81fb      	strh	r3, [r7, #14]
	
	
	return return16;
 80018f6:	89fb      	ldrh	r3, [r7, #14]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200000f8 	.word	0x200000f8
 8001904:	200000fc 	.word	0x200000fc
 8001908:	200000a0 	.word	0x200000a0
 800190c:	00000000 	.word	0x00000000

08001910 <TSC2046_Calibrate>:
//2. Calibrate resistive touch panel
void TSC2046_Calibrate(void)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
	uint16_t watchVar1=0;
 8001916:	2300      	movs	r3, #0
 8001918:	80bb      	strh	r3, [r7, #4]
	TS_TOUCH_RAW_Def myRawTouchDef;
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point();
 800191a:	f000 f9f7 	bl	8001d0c <TSC2046_TL_point>
	myTS_Calibrate.TL_X = 0;
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001920:	2200      	movs	r2, #0
 8001922:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y = 0;
 8001924:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001926:	2200      	movs	r2, #0
 8001928:	805a      	strh	r2, [r3, #2]
	myTS_Calibrate.BR_X = 0;
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <TSC2046_Calibrate+0x240>)
 800192c:	2200      	movs	r2, #0
 800192e:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y = 0;
 8001930:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001932:	2200      	movs	r2, #0
 8001934:	80da      	strh	r2, [r3, #6]
	
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001936:	f000 f9d9 	bl	8001cec <TSC2046_getRaw_Z>
 800193a:	4603      	mov	r3, r0
 800193c:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	2b32      	cmp	r3, #50	; 0x32
 8001942:	d91b      	bls.n	800197c <TSC2046_Calibrate+0x6c>
		{
			for(uint8_t i=0; i<10; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	71fb      	strb	r3, [r7, #7]
 8001948:	e014      	b.n	8001974 <TSC2046_Calibrate+0x64>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 800194a:	f000 f905 	bl	8001b58 <TSC2046_GetRawTouch>
 800194e:	4603      	mov	r3, r0
 8001950:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.TL_X += myRawTouchDef.x_touch;
 8001952:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001954:	881a      	ldrh	r2, [r3, #0]
 8001956:	883b      	ldrh	r3, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <TSC2046_Calibrate+0x240>)
 800195e:	801a      	strh	r2, [r3, #0]
				myTS_Calibrate.TL_Y += myRawTouchDef.y_touch;
 8001960:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001962:	885a      	ldrh	r2, [r3, #2]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	4413      	add	r3, r2
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <TSC2046_Calibrate+0x240>)
 800196c:	805a      	strh	r2, [r3, #2]
			for(uint8_t i=0; i<10; i++)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	3301      	adds	r3, #1
 8001972:	71fb      	strb	r3, [r7, #7]
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b09      	cmp	r3, #9
 8001978:	d9e7      	bls.n	800194a <TSC2046_Calibrate+0x3a>
			}
			
			break;
 800197a:	e003      	b.n	8001984 <TSC2046_Calibrate+0x74>
		}
		HAL_Delay(10);
 800197c:	200a      	movs	r0, #10
 800197e:	f000 fe47 	bl	8002610 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001982:	e7d8      	b.n	8001936 <TSC2046_Calibrate+0x26>
	}
	HAL_Delay(1000);
 8001984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001988:	f000 fe42 	bl	8002610 <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point();
 800198c:	f000 f9da 	bl	8001d44 <TSC2046_BR_point>
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001990:	f000 f9ac 	bl	8001cec <TSC2046_getRaw_Z>
 8001994:	4603      	mov	r3, r0
 8001996:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	2b32      	cmp	r3, #50	; 0x32
 800199c:	d91b      	bls.n	80019d6 <TSC2046_Calibrate+0xc6>
		{
			for(uint8_t i=0; i<10; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	e014      	b.n	80019ce <TSC2046_Calibrate+0xbe>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 80019a4:	f000 f8d8 	bl	8001b58 <TSC2046_GetRawTouch>
 80019a8:	4603      	mov	r3, r0
 80019aa:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.BR_X += myRawTouchDef.x_touch;
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <TSC2046_Calibrate+0x240>)
 80019ae:	889a      	ldrh	r2, [r3, #4]
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <TSC2046_Calibrate+0x240>)
 80019b8:	809a      	strh	r2, [r3, #4]
				myTS_Calibrate.BR_Y += myRawTouchDef.y_touch;
 80019ba:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <TSC2046_Calibrate+0x240>)
 80019bc:	88da      	ldrh	r2, [r3, #6]
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b62      	ldr	r3, [pc, #392]	; (8001b50 <TSC2046_Calibrate+0x240>)
 80019c6:	80da      	strh	r2, [r3, #6]
			for(uint8_t i=0; i<10; i++)
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71bb      	strb	r3, [r7, #6]
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d9e7      	bls.n	80019a4 <TSC2046_Calibrate+0x94>
			}
			break;
 80019d4:	e003      	b.n	80019de <TSC2046_Calibrate+0xce>
		}
		HAL_Delay(10);
 80019d6:	200a      	movs	r0, #10
 80019d8:	f000 fe1a 	bl	8002610 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 80019dc:	e7d8      	b.n	8001990 <TSC2046_Calibrate+0x80>
	}
	
	myTS_Calibrate.TL_X *=0.1;
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <TSC2046_Calibrate+0x240>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd4a 	bl	800047c <__aeabi_i2d>
 80019e8:	a357      	add	r3, pc, #348	; (adr r3, 8001b48 <TSC2046_Calibrate+0x238>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fdaf 	bl	8000550 <__aeabi_dmul>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	4618      	mov	r0, r3
 80019f8:	4621      	mov	r1, r4
 80019fa:	f7fe ffbb 	bl	8000974 <__aeabi_d2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a04:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y *=0.1;
 8001a06:	4b52      	ldr	r3, [pc, #328]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a08:	885b      	ldrh	r3, [r3, #2]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd36 	bl	800047c <__aeabi_i2d>
 8001a10:	a34d      	add	r3, pc, #308	; (adr r3, 8001b48 <TSC2046_Calibrate+0x238>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fd9b 	bl	8000550 <__aeabi_dmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4621      	mov	r1, r4
 8001a22:	f7fe ffa7 	bl	8000974 <__aeabi_d2uiz>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a2c:	805a      	strh	r2, [r3, #2]
	
	myTS_Calibrate.BR_X *=0.1;
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd22 	bl	800047c <__aeabi_i2d>
 8001a38:	a343      	add	r3, pc, #268	; (adr r3, 8001b48 <TSC2046_Calibrate+0x238>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fd87 	bl	8000550 <__aeabi_dmul>
 8001a42:	4603      	mov	r3, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	f7fe ff93 	bl	8000974 <__aeabi_d2uiz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a54:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y *=0.1;
 8001a56:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a58:	88db      	ldrh	r3, [r3, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd0e 	bl	800047c <__aeabi_i2d>
 8001a60:	a339      	add	r3, pc, #228	; (adr r3, 8001b48 <TSC2046_Calibrate+0x238>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fd73 	bl	8000550 <__aeabi_dmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f7fe ff7f 	bl	8000974 <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a7c:	80da      	strh	r2, [r3, #6]
	
	//1. Calculate X_Diff, Y_Diff
	myTS_Calibrate.Scale_X = (myTS_Calibrate.Width + 0.0f)/(myTS_Calibrate.BR_X - myTS_Calibrate.TL_X + 0.0f);
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a80:	8b1b      	ldrh	r3, [r3, #24]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001b54 <TSC2046_Calibrate+0x244>
 8001a8e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a94:	889b      	ldrh	r3, [r3, #4]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001b54 <TSC2046_Calibrate+0x244>
 8001aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001ab4:	edc3 7a02 	vstr	s15, [r3, #8]
	myTS_Calibrate.Scale_Y = (myTS_Calibrate.Height + 0.0f)/(myTS_Calibrate.BR_Y - myTS_Calibrate.TL_Y + 0.0f);
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001aba:	8b5b      	ldrh	r3, [r3, #26]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001b54 <TSC2046_Calibrate+0x244>
 8001ac8:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001ace:	88db      	ldrh	r3, [r3, #6]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001ad4:	885b      	ldrh	r3, [r3, #2]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001b54 <TSC2046_Calibrate+0x244>
 8001ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001aee:	edc3 7a03 	vstr	s15, [r3, #12]
	//2. Calculate Scalling ()
	myTS_Calibrate.Bias_X = 10 - myTS_Calibrate.Scale_X*myTS_Calibrate.TL_X;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001af4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001b12:	edc3 7a04 	vstr	s15, [r3, #16]
	myTS_Calibrate.Bias_Y = 10 - myTS_Calibrate.Scale_Y*myTS_Calibrate.TL_Y;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001b18:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001b1e:	885b      	ldrh	r3, [r3, #2]
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <TSC2046_Calibrate+0x240>)
 8001b36:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	f3af 8000 	nop.w
 8001b48:	9999999a 	.word	0x9999999a
 8001b4c:	3fb99999 	.word	0x3fb99999
 8001b50:	20000100 	.word	0x20000100
 8001b54:	00000000 	.word	0x00000000

08001b58 <TSC2046_GetRawTouch>:
//3. Poll for touch status
TS_TOUCH_RAW_Def TSC2046_GetRawTouch(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
	
	//Assign raw touch based on orientation
	switch (ScreenOrientation)
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <TSC2046_GetRawTouch+0xfc>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d867      	bhi.n	8001c38 <TSC2046_GetRawTouch+0xe0>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <TSC2046_GetRawTouch+0x18>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001baf 	.word	0x08001baf
 8001b78:	08001be3 	.word	0x08001be3
 8001b7c:	08001c11 	.word	0x08001c11
	{
		case 1:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8001b80:	f000 f894 	bl	8001cac <TSC2046_getRaw_X>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001b8a:	330f      	adds	r3, #15
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001b90:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_Y();
 8001b92:	f000 f89b 	bl	8001ccc <TSC2046_getRaw_Y>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001b9c:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001ba0:	22e6      	movs	r2, #230	; 0xe6
 8001ba2:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001ba6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001baa:	835a      	strh	r2, [r3, #26]
			break;
 8001bac:	e044      	b.n	8001c38 <TSC2046_GetRawTouch+0xe0>
		
		case 2:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 8001bae:	f000 f88d 	bl	8001ccc <TSC2046_getRaw_Y>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001bb8:	330f      	adds	r3, #15
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001bbe:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 8001bc0:	f000 f874 	bl	8001cac <TSC2046_getRaw_X>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001bca:	330f      	adds	r3, #15
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001bd0:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001bd4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bd8:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001bdc:	22f0      	movs	r2, #240	; 0xf0
 8001bde:	835a      	strh	r2, [r3, #26]
			break;
 8001be0:	e02a      	b.n	8001c38 <TSC2046_GetRawTouch+0xe0>
		
		case 3:
			localRawTouch.x_touch = TSC2046_getRaw_X();
 8001be2:	f000 f863 	bl	8001cac <TSC2046_getRaw_X>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001bec:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 8001bee:	f000 f86d 	bl	8001ccc <TSC2046_getRaw_Y>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001bf8:	330f      	adds	r3, #15
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001bfe:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001c02:	22e6      	movs	r2, #230	; 0xe6
 8001c04:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001c08:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c0c:	835a      	strh	r2, [r3, #26]
			break;
 8001c0e:	e013      	b.n	8001c38 <TSC2046_GetRawTouch+0xe0>
		
		case 4:
			localRawTouch.x_touch = TSC2046_getRaw_Y();
 8001c10:	f000 f85c 	bl	8001ccc <TSC2046_getRaw_Y>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001c1a:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_X();
 8001c1c:	f000 f846 	bl	8001cac <TSC2046_getRaw_X>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001c26:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001c2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c2e:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <TSC2046_GetRawTouch+0x104>)
 8001c32:	22f0      	movs	r2, #240	; 0xf0
 8001c34:	835a      	strh	r2, [r3, #26]
			break;
 8001c36:	bf00      	nop
	}
	
	return localRawTouch;
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <TSC2046_GetRawTouch+0x100>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	88ba      	ldrh	r2, [r7, #4]
 8001c42:	f362 030f 	bfi	r3, r2, #0, #16
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000fe 	.word	0x200000fe
 8001c58:	2000011c 	.word	0x2000011c
 8001c5c:	20000100 	.word	0x20000100

08001c60 <TSC2046_Begin>:

//4. Begin function
bool  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 8001c6e:	2258      	movs	r2, #88	; 0x58
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	480a      	ldr	r0, [pc, #40]	; (8001c9c <TSC2046_Begin+0x3c>)
 8001c74:	f002 f916 	bl	8003ea4 <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <TSC2046_Begin+0x40>)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <TSC2046_Begin+0x44>)
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = TSC2046_getOrientation();
 8001c84:	f000 f88c 	bl	8001da0 <TSC2046_getOrientation>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <TSC2046_Begin+0x48>)
 8001c8e:	701a      	strb	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200000a0 	.word	0x200000a0
 8001ca0:	200000f8 	.word	0x200000f8
 8001ca4:	200000fc 	.word	0x200000fc
 8001ca8:	200000fe 	.word	0x200000fe

08001cac <TSC2046_getRaw_X>:

//5. Get raw touch data
//i. get x-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_X(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_X_AXIS | CMD_Default);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <TSC2046_getRaw_X+0x1c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fde2 	bl	8001884 <TSC2046_SendCommand>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000001 	.word	0x20000001

08001ccc <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Y(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Y_AXIS | CMD_Default);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <TSC2046_getRaw_Y+0x1c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fdd2 	bl	8001884 <TSC2046_SendCommand>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000001 	.word	0x20000001

08001cec <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Z(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Z_AXIS | CMD_Default);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <TSC2046_getRaw_Z+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fdc2 	bl	8001884 <TSC2046_SendCommand>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000001 	.word	0x20000001

08001d0c <TSC2046_TL_point>:

//6. Print calibration points
//i. Top-Left corner point
void TSC2046_TL_point(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(10, 10, 3, COLOR_RED);
 8001d12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d16:	2203      	movs	r2, #3
 8001d18:	210a      	movs	r1, #10
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f7ff fadb 	bl	80012d6 <ILI9341_fillCircle>
	ILI9341_printText("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8001d20:	2301      	movs	r3, #1
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d2e:	221e      	movs	r2, #30
 8001d30:	2114      	movs	r1, #20
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <TSC2046_TL_point+0x34>)
 8001d34:	f7ff fd0c 	bl	8001750 <ILI9341_printText>
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08003ee4 	.word	0x08003ee4

08001d44 <TSC2046_BR_point>:
//ii. Bottom-Right corner point
void TSC2046_BR_point(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(myTS_Calibrate.Width-10, myTS_Calibrate.Height-10, 3, COLOR_RED);
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <TSC2046_BR_point+0x54>)
 8001d4c:	8b1b      	ldrh	r3, [r3, #24]
 8001d4e:	3b0a      	subs	r3, #10
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b218      	sxth	r0, r3
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <TSC2046_BR_point+0x54>)
 8001d56:	8b5b      	ldrh	r3, [r3, #26]
 8001d58:	3b0a      	subs	r3, #10
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b219      	sxth	r1, r3
 8001d5e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d62:	2203      	movs	r2, #3
 8001d64:	f7ff fab7 	bl	80012d6 <ILI9341_fillCircle>
	ILI9341_printText("Press here", myTS_Calibrate.Width-80, myTS_Calibrate.Height-40, COLOR_RED, COLOR_RED, 1);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <TSC2046_BR_point+0x54>)
 8001d6a:	8b1b      	ldrh	r3, [r3, #24]
 8001d6c:	3b50      	subs	r3, #80	; 0x50
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b219      	sxth	r1, r3
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <TSC2046_BR_point+0x54>)
 8001d74:	8b5b      	ldrh	r3, [r3, #26]
 8001d76:	3b28      	subs	r3, #40	; 0x28
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d8a:	4804      	ldr	r0, [pc, #16]	; (8001d9c <TSC2046_BR_point+0x58>)
 8001d8c:	f7ff fce0 	bl	8001750 <ILI9341_printText>
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000100 	.word	0x20000100
 8001d9c:	08003ee4 	.word	0x08003ee4

08001da0 <TSC2046_getOrientation>:

//7. Get orientation (from LCD driver)
uint8_t TSC2046_getOrientation(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	return ILI9341_getRotation();
 8001da4:	f7ff fd62 	bl	800186c <ILI9341_getRotation>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <TSC2046_GetTouchData>:

//8. Get touch sccreen data
TS_TOUCH_DATA_Def TSC2046_GetTouchData(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	TS_TOUCH_DATA_Def myTsData;
	uint16_t temp16x=0, temp16y=0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	82fb      	strh	r3, [r7, #22]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	82bb      	strh	r3, [r7, #20]
	//Is screen pressed
	if(TSC2046_getRaw_Z()>50)
 8001dc0:	f7ff ff94 	bl	8001cec <TSC2046_getRaw_Z>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b32      	cmp	r3, #50	; 0x32
 8001dc8:	d920      	bls.n	8001e0c <TSC2046_GetTouchData+0x5c>
	{
		myTsData.isPressed = true;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	733b      	strb	r3, [r7, #12]
		//Read touch data
		for(uint8_t i=0; i<1; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	74fb      	strb	r3, [r7, #19]
 8001dd2:	e011      	b.n	8001df8 <TSC2046_GetTouchData+0x48>
		{
			localRawTouch = TSC2046_GetRawTouch();
 8001dd4:	f7ff fec0 	bl	8001b58 <TSC2046_GetRawTouch>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001ddc:	601a      	str	r2, [r3, #0]
			temp16x += localRawTouch.x_touch;
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	8afb      	ldrh	r3, [r7, #22]
 8001de4:	4413      	add	r3, r2
 8001de6:	82fb      	strh	r3, [r7, #22]
			temp16y += localRawTouch.y_touch;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001dea:	885a      	ldrh	r2, [r3, #2]
 8001dec:	8abb      	ldrh	r3, [r7, #20]
 8001dee:	4413      	add	r3, r2
 8001df0:	82bb      	strh	r3, [r7, #20]
		for(uint8_t i=0; i<1; i++)
 8001df2:	7cfb      	ldrb	r3, [r7, #19]
 8001df4:	3301      	adds	r3, #1
 8001df6:	74fb      	strb	r3, [r7, #19]
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ea      	beq.n	8001dd4 <TSC2046_GetTouchData+0x24>
		}
		localRawTouch.x_touch = temp16x*1;
 8001dfe:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001e00:	8afb      	ldrh	r3, [r7, #22]
 8001e02:	8013      	strh	r3, [r2, #0]
		localRawTouch.y_touch = temp16y*1;
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001e06:	8abb      	ldrh	r3, [r7, #20]
 8001e08:	8053      	strh	r3, [r2, #2]
 8001e0a:	e001      	b.n	8001e10 <TSC2046_GetTouchData+0x60>
	}
	else myTsData.isPressed = false;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	733b      	strb	r3, [r7, #12]
	
	
	//X_Touch value
	myTsData.X = myTS_Calibrate.Scale_X*localRawTouch.x_touch + myTS_Calibrate.Bias_X;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <TSC2046_GetTouchData+0xd4>)
 8001e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <TSC2046_GetTouchData+0xd4>)
 8001e28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	81fb      	strh	r3, [r7, #14]
	//Y_Touch value
	myTsData.Y = myTS_Calibrate.Scale_Y*localRawTouch.y_touch + myTS_Calibrate.Bias_Y;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <TSC2046_GetTouchData+0xd4>)
 8001e3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <TSC2046_GetTouchData+0xd0>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <TSC2046_GetTouchData+0xd4>)
 8001e54:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e60:	ee17 3a90 	vmov	r3, s15
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	823b      	strh	r3, [r7, #16]
	
	return myTsData;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	6010      	str	r0, [r2, #0]
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	8093      	strh	r3, [r2, #4]
}
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000011c 	.word	0x2000011c
 8001e84:	20000100 	.word	0x20000100

08001e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8e:	f000 fb4d 	bl	800252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e92:	f000 f8b1 	bl	8001ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e96:	f000 f983 	bl	80021a0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001e9a:	f000 f94b 	bl	8002134 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001e9e:	f000 f913 	bl	80020c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  
    ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <main+0x148>)
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <main+0x14c>)
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	4948      	ldr	r1, [pc, #288]	; (8001fd8 <main+0x150>)
 8001eb6:	4849      	ldr	r0, [pc, #292]	; (8001fdc <main+0x154>)
 8001eb8:	f7ff f800 	bl	8000ebc <ILI9341_Init>
    ILI9341_setRotation(2);
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f7ff fc89 	bl	80017d4 <ILI9341_setRotation>

    TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	4944      	ldr	r1, [pc, #272]	; (8001fd8 <main+0x150>)
 8001ec6:	4846      	ldr	r0, [pc, #280]	; (8001fe0 <main+0x158>)
 8001ec8:	f7ff feca 	bl	8001c60 <TSC2046_Begin>
    TSC2046_Calibrate();
 8001ecc:	f7ff fd20 	bl	8001910 <TSC2046_Calibrate>
    ILI9341_Fill(COLOR_BLACK);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff f8d3 	bl	800107c <ILI9341_Fill>

int t = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */


myTS_Handle = TSC2046_GetTouchData();
 8001eda:	4c42      	ldr	r4, [pc, #264]	; (8001fe4 <main+0x15c>)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff66 	bl	8001db0 <TSC2046_GetTouchData>
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	6011      	str	r1, [r2, #0]
 8001eec:	889b      	ldrh	r3, [r3, #4]
 8001eee:	8093      	strh	r3, [r2, #4]


  if(myTS_Handle.isPressed){
 8001ef0:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <main+0x15c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <main+0x52>

 //ILI9341_fillCircle(myTS_Handle.X, myTS_Handle.Y, 10, COLOR_RED); //Draw circle to ILI9341


	    //no infinity, please
	      if (myTS_Handle.X == 0){
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <main+0x15c>)
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <main+0x7e>
	    	  myTS_Handle.X = 1;
 8001f00:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <main+0x15c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	805a      	strh	r2, [r3, #2]
	      }

	      Speaker_Frequency = (1*myTS_Handle.X) + 0.0;
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <main+0x15c>)
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fab6 	bl	800047c <__aeabi_i2d>
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	f7fe f964 	bl	80001e4 <__adddf3>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f7fe fd46 	bl	80009b4 <__aeabi_d2f>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <main+0x160>)
 8001f2c:	601a      	str	r2, [r3, #0]
	      Speaker_Frequency = 100;
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <main+0x160>)
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <main+0x164>)
 8001f32:	601a      	str	r2, [r3, #0]
		    Speaker_Period = 1000.0 /Speaker_Frequency;
 8001f34:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <main+0x160>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001ff0 <main+0x168>
 8001f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <main+0x16c>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]

if (t < Speaker_Frequency / 2) {
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f52:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <main+0x160>)
 8001f54:	edd3 6a00 	vldr	s13, [r3]
 8001f58:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f5c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	d508      	bpl.n	8001f7c <main+0xf4>
      HAL_GPIO_WritePin(GPIOC, Speaker_Pin, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4819      	ldr	r0, [pc, #100]	; (8001fd4 <main+0x14c>)
 8001f70:	f000 fdd8 	bl	8002b24 <HAL_GPIO_WritePin>
      t++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	e7ae      	b.n	8001eda <main+0x52>
} else if (t == Speaker_Frequency){
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <main+0x160>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	d102      	bne.n	8001f9c <main+0x114>
  t = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e79e      	b.n	8001eda <main+0x52>
} else if (t > Speaker_Frequency / 2) {
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <main+0x160>)
 8001fa8:	edd3 6a00 	vldr	s13, [r3]
 8001fac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001fb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	dd07      	ble.n	8001fce <main+0x146>
      HAL_GPIO_WritePin(GPIOC, Speaker_Pin, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <main+0x14c>)
 8001fc4:	f000 fdae 	bl	8002b24 <HAL_GPIO_WritePin>
      t++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
myTS_Handle = TSC2046_GetTouchData();
 8001fce:	e784      	b.n	8001eda <main+0x52>
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	20000184 	.word	0x20000184
 8001fe0:	20000120 	.word	0x20000120
 8001fe4:	2000017c 	.word	0x2000017c
 8001fe8:	20000178 	.word	0x20000178
 8001fec:	42c80000 	.word	0x42c80000
 8001ff0:	447a0000 	.word	0x447a0000
 8001ff4:	200001dc 	.word	0x200001dc

08001ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b094      	sub	sp, #80	; 0x50
 8001ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffe:	f107 0320 	add.w	r3, r7, #32
 8002002:	2230      	movs	r2, #48	; 0x30
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f001 ff57 	bl	8003eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <SystemClock_Config+0xc8>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <SystemClock_Config+0xc8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6413      	str	r3, [r2, #64]	; 0x40
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <SystemClock_Config+0xc8>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <SystemClock_Config+0xcc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <SystemClock_Config+0xcc>)
 8002042:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <SystemClock_Config+0xcc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800205c:	2310      	movs	r3, #16
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002060:	2302      	movs	r3, #2
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002064:	2300      	movs	r3, #0
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002068:	2308      	movs	r3, #8
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002070:	2302      	movs	r3, #2
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002074:	2304      	movs	r3, #4
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fd6b 	bl	8002b58 <HAL_RCC_OscConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002088:	f000 f914 	bl	80022b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208c:	230f      	movs	r3, #15
 800208e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002090:	2302      	movs	r3, #2
 8002092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2103      	movs	r1, #3
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 ffc5 	bl	8003038 <HAL_RCC_ClockConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020b4:	f000 f8fe 	bl	80022b4 <Error_Handler>
  }
}
 80020b8:	bf00      	nop
 80020ba:	3750      	adds	r7, #80	; 0x50
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40007000 	.word	0x40007000

080020c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <MX_SPI1_Init+0x64>)
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <MX_SPI1_Init+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_SPI1_Init+0x64>)
 80020d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <MX_SPI1_Init+0x64>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <MX_SPI1_Init+0x64>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_SPI1_Init+0x64>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_SPI1_Init+0x64>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_SPI1_Init+0x64>)
 80020f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_SPI1_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <MX_SPI1_Init+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_SPI1_Init+0x64>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <MX_SPI1_Init+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_SPI1_Init+0x64>)
 8002114:	220a      	movs	r2, #10
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_SPI1_Init+0x64>)
 800211a:	f001 f94b 	bl	80033b4 <HAL_SPI_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002124:	f000 f8c6 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000184 	.word	0x20000184
 8002130:	40013000 	.word	0x40013000

08002134 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_SPI2_Init+0x64>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <MX_SPI2_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_SPI2_Init+0x64>)
 8002140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002144:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_SPI2_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_SPI2_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_SPI2_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_SPI2_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_SPI2_Init+0x64>)
 8002160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002164:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_SPI2_Init+0x64>)
 8002168:	2228      	movs	r2, #40	; 0x28
 800216a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <MX_SPI2_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_SPI2_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <MX_SPI2_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_SPI2_Init+0x64>)
 8002180:	220a      	movs	r2, #10
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_SPI2_Init+0x64>)
 8002186:	f001 f915 	bl	80033b4 <HAL_SPI_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002190:	f000 f890 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000120 	.word	0x20000120
 800219c:	40003800 	.word	0x40003800

080021a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a39      	ldr	r2, [pc, #228]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a32      	ldr	r2, [pc, #200]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <MX_GPIO_Init+0x104>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <MX_GPIO_Init+0x104>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LCD_DC_Pin, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	2181      	movs	r1, #129	; 0x81
 800220e:	4826      	ldr	r0, [pc, #152]	; (80022a8 <MX_GPIO_Init+0x108>)
 8002210:	f000 fc88 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800221a:	4824      	ldr	r0, [pc, #144]	; (80022ac <MX_GPIO_Init+0x10c>)
 800221c:	f000 fc82 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	2160      	movs	r1, #96	; 0x60
 8002224:	4822      	ldr	r0, [pc, #136]	; (80022b0 <MX_GPIO_Init+0x110>)
 8002226:	f000 fc7d 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_DC_Pin;
 800222a:	2381      	movs	r3, #129	; 0x81
 800222c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222e:	2301      	movs	r3, #1
 8002230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	2300      	movs	r3, #0
 8002238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4819      	ldr	r0, [pc, #100]	; (80022a8 <MX_GPIO_Init+0x108>)
 8002242:	f000 faed 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4619      	mov	r1, r3
 800225e:	4813      	ldr	r0, [pc, #76]	; (80022ac <MX_GPIO_Init+0x10c>)
 8002260:	f000 fade 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 8002264:	2360      	movs	r3, #96	; 0x60
 8002266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4619      	mov	r1, r3
 800227a:	480d      	ldr	r0, [pc, #52]	; (80022b0 <MX_GPIO_Init+0x110>)
 800227c:	f000 fad0 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : Speaker_Pin */
  GPIO_InitStruct.Pin = Speaker_Pin;
 8002280:	2301      	movs	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	4619      	mov	r1, r3
 8002296:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_GPIO_Init+0x108>)
 8002298:	f000 fac2 	bl	8002820 <HAL_GPIO_Init>

}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_MspInit+0x4c>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	4a0f      	ldr	r2, [pc, #60]	; (8002310 <HAL_MspInit+0x4c>)
 80022d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d8:	6453      	str	r3, [r2, #68]	; 0x44
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_MspInit+0x4c>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e2:	607b      	str	r3, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_MspInit+0x4c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_MspInit+0x4c>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_MspInit+0x4c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002302:	2007      	movs	r0, #7
 8002304:	f000 fa58 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_SPI_MspInit+0x124>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12c      	bne.n	8002390 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_SPI_MspInit+0x128>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a3f      	ldr	r2, [pc, #252]	; (800243c <HAL_SPI_MspInit+0x128>)
 8002340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_SPI_MspInit+0x128>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_SPI_MspInit+0x128>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_SPI_MspInit+0x128>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <HAL_SPI_MspInit+0x128>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800236e:	23e0      	movs	r3, #224	; 0xe0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237a:	2303      	movs	r3, #3
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800237e:	2305      	movs	r3, #5
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	482d      	ldr	r0, [pc, #180]	; (8002440 <HAL_SPI_MspInit+0x12c>)
 800238a:	f000 fa49 	bl	8002820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800238e:	e04f      	b.n	8002430 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_SPI_MspInit+0x130>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d14a      	bne.n	8002430 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_SPI_MspInit+0x128>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TS_DO_Pin|T_DIN_Pin;
 80023ee:	230c      	movs	r3, #12
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023fe:	2305      	movs	r3, #5
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4619      	mov	r1, r3
 8002408:	480f      	ldr	r0, [pc, #60]	; (8002448 <HAL_SPI_MspInit+0x134>)
 800240a:	f000 fa09 	bl	8002820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800240e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002420:	2305      	movs	r3, #5
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <HAL_SPI_MspInit+0x138>)
 800242c:	f000 f9f8 	bl	8002820 <HAL_GPIO_Init>
}
 8002430:	bf00      	nop
 8002432:	3730      	adds	r7, #48	; 0x30
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40013000 	.word	0x40013000
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000
 8002444:	40003800 	.word	0x40003800
 8002448:	40020800 	.word	0x40020800
 800244c:	40020400 	.word	0x40020400

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 f894 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <SystemInit+0x28>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <SystemInit+0x28>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SystemInit+0x28>)
 80024c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024c6:	609a      	str	r2, [r3, #8]
#endif
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002510 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024de:	e003      	b.n	80024e8 <LoopCopyDataInit>

080024e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024e6:	3104      	adds	r1, #4

080024e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024e8:	480b      	ldr	r0, [pc, #44]	; (8002518 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024f0:	d3f6      	bcc.n	80024e0 <CopyDataInit>
  ldr  r2, =_sbss
 80024f2:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024f4:	e002      	b.n	80024fc <LoopFillZerobss>

080024f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024f8:	f842 3b04 	str.w	r3, [r2], #4

080024fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002500:	d3f9      	bcc.n	80024f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002502:	f7ff ffd3 	bl	80024ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002506:	f001 fca9 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250a:	f7ff fcbd 	bl	8001e88 <main>
  bx  lr    
 800250e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002510:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002514:	08004410 	.word	0x08004410
  ldr  r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800251c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002520:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002524:	200001e4 	.word	0x200001e4

08002528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC_IRQHandler>
	...

0800252c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_Init+0x40>)
 8002536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_Init+0x40>)
 8002542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_Init+0x40>)
 800254e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002554:	2003      	movs	r0, #3
 8002556:	f000 f92f 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255a:	2000      	movs	r0, #0
 800255c:	f000 f808 	bl	8002570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002560:	f7ff feb0 	bl	80022c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023c00 	.word	0x40023c00

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_InitTick+0x54>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f939 	bl	8002806 <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f000 f90f 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b0:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HAL_InitTick+0x5c>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000004 	.word	0x20000004
 80025c8:	2000000c 	.word	0x2000000c
 80025cc:	20000008 	.word	0x20000008

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	2000000c 	.word	0x2000000c
 80025f4:	200001e0 	.word	0x200001e0

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	200001e0 	.word	0x200001e0

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_Delay+0x40>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000000c 	.word	0x2000000c

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff47 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff5c 	bl	800269c <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffb0 	bl	8002774 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e159      	b.n	8002af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8148 	bne.w	8002aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00b      	beq.n	800287a <HAL_GPIO_Init+0x5a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286e:	2b11      	cmp	r3, #17
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0xfc>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a2 	beq.w	8002aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x2e4>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2e4>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x2e4>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c2:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x2e8>)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	089b      	lsrs	r3, r3, #2
 80029c8:	3302      	adds	r3, #2
 80029ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <HAL_GPIO_Init+0x2ec>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_GPIO_Init+0x202>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x1fe>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a46      	ldr	r2, [pc, #280]	; (8002b14 <HAL_GPIO_Init+0x2f4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x1fa>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a45      	ldr	r2, [pc, #276]	; (8002b18 <HAL_GPIO_Init+0x2f8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x1f6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a44      	ldr	r2, [pc, #272]	; (8002b1c <HAL_GPIO_Init+0x2fc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x1f2>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e008      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a16:	2303      	movs	r3, #3
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x204>
 8002a22:	2300      	movs	r3, #0
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f002 0203 	and.w	r2, r2, #3
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a34:	4934      	ldr	r1, [pc, #208]	; (8002b08 <HAL_GPIO_Init+0x2e8>)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a66:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a90:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aba:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_GPIO_Init+0x300>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b0f      	cmp	r3, #15
 8002af4:	f67f aea2 	bls.w	800283c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3724      	adds	r7, #36	; 0x24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e25b      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d075      	beq.n	8002c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b76:	4ba3      	ldr	r3, [pc, #652]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d00c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4ba0      	ldr	r3, [pc, #640]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b9d      	ldr	r3, [pc, #628]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4b99      	ldr	r3, [pc, #612]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d05b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x108>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d157      	bne.n	8002c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e236      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x74>
 8002bbe:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a90      	ldr	r2, [pc, #576]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x98>
 8002bd6:	4b8b      	ldr	r3, [pc, #556]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a8a      	ldr	r2, [pc, #552]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a87      	ldr	r2, [pc, #540]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xb0>
 8002bf0:	4b84      	ldr	r3, [pc, #528]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a83      	ldr	r2, [pc, #524]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b81      	ldr	r3, [pc, #516]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a80      	ldr	r2, [pc, #512]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7ff fcf2 	bl	80025f8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7ff fcee 	bl	80025f8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1fb      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xc0>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff fcde 	bl	80025f8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff fcda 	bl	80025f8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1e7      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0xe8>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c6e:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c86:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d116      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1bb      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002caa:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4952      	ldr	r1, [pc, #328]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	e03a      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d020      	beq.n	8002d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCC_OscConfig+0x2b0>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7ff fc93 	bl	80025f8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7ff fc8f 	bl	80025f8 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e19c      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	4b46      	ldr	r3, [pc, #280]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4940      	ldr	r1, [pc, #256]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]
 8002d08:	e015      	b.n	8002d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0a:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <HAL_RCC_OscConfig+0x2b0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff fc72 	bl	80025f8 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d18:	f7ff fc6e 	bl	80025f8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e17b      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d030      	beq.n	8002da4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d016      	beq.n	8002d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_RCC_OscConfig+0x2b4>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7ff fc52 	bl	80025f8 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7ff fc4e 	bl	80025f8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e15b      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x200>
 8002d76:	e015      	b.n	8002da4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x2b4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7ff fc3b 	bl	80025f8 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d86:	f7ff fc37 	bl	80025f8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e144      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b1a      	ldr	r3, [pc, #104]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f0      	bne.n	8002d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a0 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x2b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d121      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x2b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_RCC_OscConfig+0x2b8>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff fbfd 	bl	80025f8 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	e011      	b.n	8002e26 <HAL_RCC_OscConfig+0x2ce>
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	42470000 	.word	0x42470000
 8002e0c:	42470e80 	.word	0x42470e80
 8002e10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e14:	f7ff fbf0 	bl	80025f8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0fd      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x4d4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x2f0>
 8002e3a:	4b7d      	ldr	r3, [pc, #500]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a7c      	ldr	r2, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	e01c      	b.n	8002e82 <HAL_RCC_OscConfig+0x32a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCC_OscConfig+0x312>
 8002e50:	4b77      	ldr	r3, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a76      	ldr	r2, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e56:	f043 0304 	orr.w	r3, r3, #4
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	4b74      	ldr	r3, [pc, #464]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a73      	ldr	r2, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e00b      	b.n	8002e82 <HAL_RCC_OscConfig+0x32a>
 8002e6a:	4b71      	ldr	r3, [pc, #452]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a70      	ldr	r2, [pc, #448]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	4b6e      	ldr	r3, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a6d      	ldr	r2, [pc, #436]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d015      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8a:	f7ff fbb5 	bl	80025f8 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7ff fbb1 	bl	80025f8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0bc      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ee      	beq.n	8002e92 <HAL_RCC_OscConfig+0x33a>
 8002eb4:	e014      	b.n	8002ee0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7ff fb9f 	bl	80025f8 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7ff fb9b 	bl	80025f8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0a6      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed4:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ee      	bne.n	8002ebe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	4a51      	ldr	r2, [pc, #324]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8092 	beq.w	8003020 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d05c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d141      	bne.n	8002f94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f10:	4b48      	ldr	r3, [pc, #288]	; (8003034 <HAL_RCC_OscConfig+0x4dc>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7ff fb6f 	bl	80025f8 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1e:	f7ff fb6b 	bl	80025f8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e078      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	3b01      	subs	r3, #1
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	061b      	lsls	r3, r3, #24
 8002f60:	4933      	ldr	r1, [pc, #204]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_RCC_OscConfig+0x4dc>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff fb44 	bl	80025f8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7ff fb40 	bl	80025f8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e04d      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x41c>
 8002f92:	e045      	b.n	8003020 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x4dc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff fb2d 	bl	80025f8 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7ff fb29 	bl	80025f8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e036      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f0      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x44a>
 8002fc0:	e02e      	b.n	8003020 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e029      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_RCC_OscConfig+0x4d8>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d115      	bne.n	800301c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d106      	bne.n	800301c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40007000 	.word	0x40007000
 8003030:	40023800 	.word	0x40023800
 8003034:	42470060 	.word	0x42470060

08003038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0cc      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d90c      	bls.n	8003074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b65      	ldr	r3, [pc, #404]	; (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b8      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a58      	ldr	r2, [pc, #352]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b50      	ldr	r3, [pc, #320]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	494d      	ldr	r1, [pc, #308]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d044      	beq.n	8003158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d119      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d003      	beq.n	80030f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e06f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e067      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4934      	ldr	r1, [pc, #208]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003128:	f7ff fa66 	bl	80025f8 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7ff fa62 	bl	80025f8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e04f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d20c      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e032      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4916      	ldr	r1, [pc, #88]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	490e      	ldr	r1, [pc, #56]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031be:	f000 f821 	bl	8003204 <HAL_RCC_GetSysClockFreq>
 80031c2:	4601      	mov	r1, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	fa21 f303 	lsr.w	r3, r1, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff f9c6 	bl	8002570 <HAL_InitTick>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023c00 	.word	0x40023c00
 80031f4:	40023800 	.word	0x40023800
 80031f8:	080043f0 	.word	0x080043f0
 80031fc:	20000004 	.word	0x20000004
 8003200:	20000008 	.word	0x20000008

08003204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	2300      	movs	r3, #0
 8003214:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321a:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b04      	cmp	r3, #4
 8003224:	d007      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x32>
 8003226:	2b08      	cmp	r3, #8
 8003228:	d008      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x38>
 800322a:	2b00      	cmp	r3, #0
 800322c:	f040 80b4 	bne.w	8003398 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003232:	60bb      	str	r3, [r7, #8]
       break;
 8003234:	e0b3      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003236:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003238:	60bb      	str	r3, [r7, #8]
      break;
 800323a:	e0b0      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800323c:	4b5a      	ldr	r3, [pc, #360]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003244:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003246:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04a      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	f04f 0400 	mov.w	r4, #0
 800325c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	ea03 0501 	and.w	r5, r3, r1
 8003268:	ea04 0602 	and.w	r6, r4, r2
 800326c:	4629      	mov	r1, r5
 800326e:	4632      	mov	r2, r6
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	f04f 0400 	mov.w	r4, #0
 8003278:	0154      	lsls	r4, r2, #5
 800327a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800327e:	014b      	lsls	r3, r1, #5
 8003280:	4619      	mov	r1, r3
 8003282:	4622      	mov	r2, r4
 8003284:	1b49      	subs	r1, r1, r5
 8003286:	eb62 0206 	sbc.w	r2, r2, r6
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	f04f 0400 	mov.w	r4, #0
 8003292:	0194      	lsls	r4, r2, #6
 8003294:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003298:	018b      	lsls	r3, r1, #6
 800329a:	1a5b      	subs	r3, r3, r1
 800329c:	eb64 0402 	sbc.w	r4, r4, r2
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	00e2      	lsls	r2, r4, #3
 80032aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032ae:	00d9      	lsls	r1, r3, #3
 80032b0:	460b      	mov	r3, r1
 80032b2:	4614      	mov	r4, r2
 80032b4:	195b      	adds	r3, r3, r5
 80032b6:	eb44 0406 	adc.w	r4, r4, r6
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	0262      	lsls	r2, r4, #9
 80032c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032c8:	0259      	lsls	r1, r3, #9
 80032ca:	460b      	mov	r3, r1
 80032cc:	4614      	mov	r4, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	4621      	mov	r1, r4
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f04f 0400 	mov.w	r4, #0
 80032d8:	461a      	mov	r2, r3
 80032da:	4623      	mov	r3, r4
 80032dc:	f7fd fbba 	bl	8000a54 <__aeabi_uldivmod>
 80032e0:	4603      	mov	r3, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e049      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	ea03 0501 	and.w	r5, r3, r1
 80032fe:	ea04 0602 	and.w	r6, r4, r2
 8003302:	4629      	mov	r1, r5
 8003304:	4632      	mov	r2, r6
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	0154      	lsls	r4, r2, #5
 8003310:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003314:	014b      	lsls	r3, r1, #5
 8003316:	4619      	mov	r1, r3
 8003318:	4622      	mov	r2, r4
 800331a:	1b49      	subs	r1, r1, r5
 800331c:	eb62 0206 	sbc.w	r2, r2, r6
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	0194      	lsls	r4, r2, #6
 800332a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800332e:	018b      	lsls	r3, r1, #6
 8003330:	1a5b      	subs	r3, r3, r1
 8003332:	eb64 0402 	sbc.w	r4, r4, r2
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	00e2      	lsls	r2, r4, #3
 8003340:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003344:	00d9      	lsls	r1, r3, #3
 8003346:	460b      	mov	r3, r1
 8003348:	4614      	mov	r4, r2
 800334a:	195b      	adds	r3, r3, r5
 800334c:	eb44 0406 	adc.w	r4, r4, r6
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	02a2      	lsls	r2, r4, #10
 800335a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800335e:	0299      	lsls	r1, r3, #10
 8003360:	460b      	mov	r3, r1
 8003362:	4614      	mov	r4, r2
 8003364:	4618      	mov	r0, r3
 8003366:	4621      	mov	r1, r4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f04f 0400 	mov.w	r4, #0
 800336e:	461a      	mov	r2, r3
 8003370:	4623      	mov	r3, r4
 8003372:	f7fd fb6f 	bl	8000a54 <__aeabi_uldivmod>
 8003376:	4603      	mov	r3, r0
 8003378:	460c      	mov	r4, r1
 800337a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	3301      	adds	r3, #1
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	60bb      	str	r3, [r7, #8]
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800339a:	60bb      	str	r3, [r7, #8]
      break;
 800339c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339e:	68bb      	ldr	r3, [r7, #8]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a8:	40023800 	.word	0x40023800
 80033ac:	00f42400 	.word	0x00f42400
 80033b0:	007a1200 	.word	0x007a1200

080033b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e056      	b.n	8003474 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe ff97 	bl	8002314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	ea42 0103 	orr.w	r1, r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	0c1b      	lsrs	r3, r3, #16
 8003444:	f003 0104 	and.w	r1, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003462:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_SPI_Transmit+0x22>
 800349a:	2302      	movs	r3, #2
 800349c:	e11e      	b.n	80036dc <HAL_SPI_Transmit+0x260>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a6:	f7ff f8a7 	bl	80025f8 <HAL_GetTick>
 80034aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034c0:	e103      	b.n	80036ca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_Transmit+0x52>
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034d2:	e0fa      	b.n	80036ca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2203      	movs	r2, #3
 80034d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351a:	d107      	bne.n	800352c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800352a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d007      	beq.n	800354a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003552:	d14b      	bne.n	80035ec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Transmit+0xe6>
 800355c:	8afb      	ldrh	r3, [r7, #22]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d13e      	bne.n	80035e0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	881a      	ldrh	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	1c9a      	adds	r2, r3, #2
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003586:	e02b      	b.n	80035e0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d112      	bne.n	80035bc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	1c9a      	adds	r2, r3, #2
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80035ba:	e011      	b.n	80035e0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035bc:	f7ff f81c 	bl	80025f8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d803      	bhi.n	80035d4 <HAL_SPI_Transmit+0x158>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <HAL_SPI_Transmit+0x15e>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035de:	e074      	b.n	80036ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ce      	bne.n	8003588 <HAL_SPI_Transmit+0x10c>
 80035ea:	e04c      	b.n	8003686 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Transmit+0x17e>
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d140      	bne.n	800367c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003620:	e02c      	b.n	800367c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d113      	bne.n	8003658 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	86da      	strh	r2, [r3, #54]	; 0x36
 8003656:	e011      	b.n	800367c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003658:	f7fe ffce 	bl	80025f8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d803      	bhi.n	8003670 <HAL_SPI_Transmit+0x1f4>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d102      	bne.n	8003676 <HAL_SPI_Transmit+0x1fa>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	77fb      	strb	r3, [r7, #31]
          goto error;
 800367a:	e026      	b.n	80036ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1cd      	bne.n	8003622 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fba4 	bl	8003dd8 <SPI_EndRxTxTransaction>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e000      	b.n	80036ca <HAL_SPI_Transmit+0x24e>
  }

error:
 80036c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036da:	7ffb      	ldrb	r3, [r7, #31]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003700:	d112      	bne.n	8003728 <HAL_SPI_Receive+0x44>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2204      	movs	r2, #4
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8e9 	bl	80038f6 <HAL_SPI_TransmitReceive>
 8003724:	4603      	mov	r3, r0
 8003726:	e0e2      	b.n	80038ee <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_SPI_Receive+0x52>
 8003732:	2302      	movs	r3, #2
 8003734:	e0db      	b.n	80038ee <HAL_SPI_Receive+0x20a>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800373e:	f7fe ff5b 	bl	80025f8 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003754:	e0c2      	b.n	80038dc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Receive+0x7e>
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d102      	bne.n	8003768 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003766:	e0b9      	b.n	80038dc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2204      	movs	r2, #4
 800376c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ae:	d107      	bne.n	80037c0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d007      	beq.n	80037de <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d162      	bne.n	80038ac <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037e6:	e02e      	b.n	8003846 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d115      	bne.n	8003822 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f103 020c 	add.w	r2, r3, #12
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003820:	e011      	b.n	8003846 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003822:	f7fe fee9 	bl	80025f8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d803      	bhi.n	800383a <HAL_SPI_Receive+0x156>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d102      	bne.n	8003840 <HAL_SPI_Receive+0x15c>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003844:	e04a      	b.n	80038dc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1cb      	bne.n	80037e8 <HAL_SPI_Receive+0x104>
 8003850:	e031      	b.n	80038b6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d113      	bne.n	8003888 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	b292      	uxth	r2, r2
 800386c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	1c9a      	adds	r2, r3, #2
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003886:	e011      	b.n	80038ac <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003888:	f7fe feb6 	bl	80025f8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d803      	bhi.n	80038a0 <HAL_SPI_Receive+0x1bc>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d102      	bne.n	80038a6 <HAL_SPI_Receive+0x1c2>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038aa:	e017      	b.n	80038dc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1cd      	bne.n	8003852 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fa27 	bl	8003d0e <SPI_EndRxTransaction>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
 80038d8:	e000      	b.n	80038dc <HAL_SPI_Receive+0x1f8>
  }

error :
 80038da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08c      	sub	sp, #48	; 0x30
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003904:	2301      	movs	r3, #1
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_SPI_TransmitReceive+0x26>
 8003918:	2302      	movs	r3, #2
 800391a:	e18a      	b.n	8003c32 <HAL_SPI_TransmitReceive+0x33c>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003924:	f7fe fe68 	bl	80025f8 <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800393e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00f      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x70>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394c:	d107      	bne.n	800395e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_SPI_TransmitReceive+0x68>
 8003956:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800395a:	2b04      	cmp	r3, #4
 800395c:	d003      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003964:	e15b      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x82>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x82>
 8003972:	887b      	ldrh	r3, [r7, #2]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800397e:	e14e      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b04      	cmp	r3, #4
 800398a:	d003      	beq.n	8003994 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2205      	movs	r2, #5
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	887a      	ldrh	r2, [r7, #2]
 80039b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d007      	beq.n	80039e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f0:	d178      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_SPI_TransmitReceive+0x10a>
 80039fa:	8b7b      	ldrh	r3, [r7, #26]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d166      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a24:	e053      	b.n	8003ace <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11b      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x176>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <HAL_SPI_TransmitReceive+0x176>
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d113      	bne.n	8003a6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d119      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x1b8>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d014      	beq.n	8003aae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	b292      	uxth	r2, r2
 8003a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aae:	f7fe fda3 	bl	80025f8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d807      	bhi.n	8003ace <HAL_SPI_TransmitReceive+0x1d8>
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d003      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003acc:	e0a7      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1a6      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x130>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1a1      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x130>
 8003ae2:	e07c      	b.n	8003bde <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x1fc>
 8003aec:	8b7b      	ldrh	r3, [r7, #26]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d16b      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b18:	e057      	b.n	8003bca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d11c      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x26c>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_SPI_TransmitReceive+0x26c>
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d114      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d119      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x2ae>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ba4:	f7fe fd28 	bl	80025f8 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d803      	bhi.n	8003bbc <HAL_SPI_TransmitReceive+0x2c6>
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d102      	bne.n	8003bc2 <HAL_SPI_TransmitReceive+0x2cc>
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bc8:	e029      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1a2      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x224>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d19d      	bne.n	8003b1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f8f8 	bl	8003dd8 <SPI_EndRxTxTransaction>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bfa:	e010      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	e000      	b.n	8003c1e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3730      	adds	r7, #48	; 0x30
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4a:	e04c      	b.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d048      	beq.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c54:	f7fe fcd0 	bl	80025f8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d902      	bls.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x30>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d13d      	bne.n	8003ce6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c82:	d111      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8c:	d004      	beq.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d107      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb0:	d10f      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e00f      	b.n	8003d06 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1a3      	bne.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d22:	d111      	bne.n	8003d48 <SPI_EndRxTransaction+0x3a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2c:	d004      	beq.n	8003d38 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d107      	bne.n	8003d48 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d50:	d12a      	bne.n	8003da8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5a:	d012      	beq.n	8003d82 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff ff67 	bl	8003c3a <SPI_WaitFlagStateUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02d      	beq.n	8003dce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e026      	b.n	8003dd0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff ff54 	bl	8003c3a <SPI_WaitFlagStateUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01a      	beq.n	8003dce <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e013      	b.n	8003dd0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	2101      	movs	r1, #1
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff ff41 	bl	8003c3a <SPI_WaitFlagStateUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f043 0220 	orr.w	r2, r3, #32
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e000      	b.n	8003dd0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <SPI_EndRxTxTransaction+0x7c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <SPI_EndRxTxTransaction+0x80>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0d5b      	lsrs	r3, r3, #21
 8003df0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d112      	bne.n	8003e2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff13 	bl	8003c3a <SPI_WaitFlagStateUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e00f      	b.n	8003e4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d0f2      	beq.n	8003e2a <SPI_EndRxTxTransaction+0x52>
 8003e44:	e000      	b.n	8003e48 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e46:	bf00      	nop
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000004 	.word	0x20000004
 8003e58:	165e9f81 	.word	0x165e9f81

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4e0d      	ldr	r6, [pc, #52]	; (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1ba4      	subs	r4, r4, r6
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2500      	movs	r5, #0
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4e0b      	ldr	r6, [pc, #44]	; (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f000 f82c 	bl	8003ecc <_init>
 8003e74:	1ba4      	subs	r4, r4, r6
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2500      	movs	r5, #0
 8003e7a:	42a5      	cmp	r5, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e84:	4798      	blx	r3
 8003e86:	3501      	adds	r5, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e8e:	4798      	blx	r3
 8003e90:	3501      	adds	r5, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08004408 	.word	0x08004408
 8003e98:	08004408 	.word	0x08004408
 8003e9c:	08004408 	.word	0x08004408
 8003ea0:	0800440c 	.word	0x0800440c

08003ea4 <memcpy>:
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	1e43      	subs	r3, r0, #1
 8003ea8:	440a      	add	r2, r1
 8003eaa:	4291      	cmp	r1, r2
 8003eac:	d100      	bne.n	8003eb0 <memcpy+0xc>
 8003eae:	bd10      	pop	{r4, pc}
 8003eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb8:	e7f7      	b.n	8003eaa <memcpy+0x6>

08003eba <memset>:
 8003eba:	4402      	add	r2, r0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d100      	bne.n	8003ec4 <memset+0xa>
 8003ec2:	4770      	bx	lr
 8003ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec8:	e7f9      	b.n	8003ebe <memset+0x4>
	...

08003ecc <_init>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr

08003ed8 <_fini>:
 8003ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eda:	bf00      	nop
 8003edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ede:	bc08      	pop	{r3}
 8003ee0:	469e      	mov	lr, r3
 8003ee2:	4770      	bx	lr
